import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class Decryptor {
    private static int[][] map= {
            {0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe},
            {0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0},
            {0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7},
            {0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa},
            {0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4},
            {0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3},
            {0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1},
            {0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf},
            {0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2},
            {0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5},
            {0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb},
            {0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6},
            {0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8},
            {0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9},
            {0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd},
            {0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc}
    };
    private ArrayList<ArrayList<Integer>> keycombi;
    private ArrayList<ArrayList<Integer>> plaincombi;
    private int textlength;


    public static void main(String[] args) {
        FileReader fileReader = new FileReader();
        Decryptor decryptor = new Decryptor();
        ArrayList<Integer> cipher1 = fileReader.read("ciphertext1");
        decryptor.decrypt(cipher1);
        decryptor.findWord(" and ");
    }


    private void decrypt(ArrayList<Integer> ciphers){
        DecryptMap decryptMap = new DecryptMap(map);
        keycombi = new ArrayList<>();
        plaincombi = new ArrayList<>();
        textlength = ciphers.size();

        for (int cipher: ciphers) {
            ArrayList<Integer>[] result = decryptMap.getAllCombi(cipher);
            keycombi.add(result[0]);
            plaincombi.add(result[1]);
            //System.out.print("\n");
        }
    }

    // todo: find the right key
    // try to find specific words
    private void findWord(String word) {
        int wordlength = word.length();
        ArrayList<Integer> startindex = new ArrayList<>();
        int find = 0;
        for (int textindex = 0; textindex < textlength; textindex++) {
            if (plaincombi.get(textindex).contains((int)word.charAt(0))) {
                find = 1;
                for (int wordindex = 1; wordindex < wordlength; wordindex++) {
                    if (textindex+wordindex >= textlength ||
                            !plaincombi.get(textindex+wordindex).contains((int)word.charAt(wordindex))) {
                        find = 0;
                        break;
                    }
                }
                if (find==1) {
                    startindex.add(textindex);
                }
            }
        }
        System.out.print(startindex+"\n");
        System.out.print(startindex.size());
    }
}
