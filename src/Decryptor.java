import java.util.ArrayList;

public class Decryptor {
    private static int[][] map= {
        {0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe},
        {0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0},
        {0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7},
        {0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa},
        {0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4},
        {0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3},
        {0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1},
        {0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf},
        {0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2},
        {0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5},
        {0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb},
        {0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6},
        {0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8},
        {0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9},
        {0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd},
        {0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc}
    };

    public static void main(String[] args) {
        FileReader fileReader = new FileReader();
        Decryptor decryptor = new Decryptor();
        ArrayList<Integer> cipher1 = fileReader.read("ciphertext1");
        decryptor.decrypt(cipher1);


    }


    private void decrypt(ArrayList<Integer> ciphers){
        DecryptMap decryptMap = new DecryptMap(map);
        for (int cipher: ciphers) {
            int ch = cipher >> 4;
            int cl = cipher & 15;
            System.out.print(Integer.toHexString(cipher)+","+Integer.toHexString(ch)+","+Integer.toHexString(cl)+"     ");
            //ch <- map [ ph ] [ kl ]
            //cl <- map [ pl ] [ kh ]
            ArrayList<Integer> chcombi = decryptMap.getCombi(ch);
            ArrayList<Integer> clcombi = decryptMap.getCombi(cl);

            getPlain(chcombi,clcombi);


            System.out.print("{");
            for(int i: chcombi) {
                System.out.print(Integer.toHexString(i)+",");
            }
            System.out.print("}");


            //decryptMap.getCombi(cl);
            /*
            System.out.print("{");
            for(int i: clcombi) {
                System.out.print(Integer.toHexString(i)+",");
            }
            System.out.print("}");

            */
            System.out.print("\n");
            break;
        }
    }

    private ArrayList<Integer> getPlain(ArrayList<Integer> chcombi, ArrayList<Integer> clcombi) {
        ArrayList<Integer> plainlist = new ArrayList<>();
        ArrayList<Integer> keylist = new ArrayList<>();
        int p,k;
        for (int chc: chcombi) {
            for (int clc: clcombi) {
                p = chc&0xf0 | (clc>>4);
                k = (clc&0x0f)<<4 | (chc&0x0f);
                if (isPrintable(p)&& (isPrintable(k)||isNonPrintable(k))) {
                    plainlist.add(p);
                    keylist.add(k);
                    System.out.print("["+(char)p+" "+k+"]");
                }
            }
        }
        System.out.print("size = "+plainlist.size());
        return plainlist;
    }


    private boolean isPrintable(int text) {
        return (text > 31) && (text < 128);
    }

    private boolean isNonPrintable(int text) {
        return text < 32;
    }
}
